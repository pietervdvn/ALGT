<?xml version="1.0" encoding="UTF-8"?>
<!--
 
 Place this file into ~/.local/share/gtksourceview-3.0/language-specs

 Author: Pieter Vander Vennet; pietervdvn@gmail.com
 

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="language" _name="Language" version="2.0" _section="Source">
  <metadata>
    <property name="globs">*.language</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="comment"      _name="Comment"      map-to="def:comment"/>
    <style id="noise"        _name="Boiler plate that distracts"      map-to="def:comment"/>

    <style id="heading"      _name="Header"       map-to="def:keyword" />
	<style id="title"		 _name="Title"		  map-to="def:keyword" />
    <style id="identifier"   _name="Identifier"   />
    <style id="rel-symb"     _name="Relation symbol" map-to="def:operator"/>
  </styles>

  <definitions>

    <define-regex id="id">([[:lower:]][[:alnum:]]*)</define-regex>
    <define-regex id="idUpper">([[:alpha:]][[:alnum:]]*)</define-regex>

    <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>(#)</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>


   <context id="header" style-ref="heading">
   <start>(Syntax|Functions|Relations|Rules|Properties)</start>
   <end>(=+)</end>
   </context>

    <context id="bnf-keywords" style-ref="def:keyword">
      <keyword>Identifier</keyword>
      <keyword>Number</keyword>
      <keyword>Any</keyword>
      <keyword>Digit</keyword>
      <keyword>Lower</keyword>
      <keyword>Upper</keyword>
      <keyword>LineChar</keyword>
      <keyword>String</keyword>
    </context>

    <context id="token" style-ref="def:string">
      <match>("([^"\\]|\\\\|\\"|\\n)*")</match>
    </context>

    <context id="bnf-bar" style-ref="def:operator">
      <match>(\|)</match>
    </context>


    <context id="ident" style-ref="identifier">
      <match>(\%{id})</match>
    </context>
  

    <context id="ascription">
    <match>((?'e'\%{idUpper})\s*:\s*(?'t'\%{id}))</match>
    <include>
       <context sub-pattern="t" style-ref="def:type"/>
    </include>
    </context>


    <context id="bnf-decl">
      <match>((?'id'\%{id})\s*(?'assgn'::=))</match>
      <include>
        <context sub-pattern="id" style-ref="def:type"/>
        <context sub-pattern="assgn" style-ref="noise"/>
      </include>
    </context>

    <context id="doc-title" once-only="true">
    <start>([A-Za-z0-9 ]+)</start>
	<end>(\*\*\**)</end>
    <include>
      <context sub-pattern="0" where="start" style-ref="title" />
      <context sub-pattern="0" where="end" style-ref="title" />
    </include>
    </context>

    <context id="syntax-section">
      <start>(Syntax)</start>
      <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="bnf-decl"/>
        <context ref="token"/>
        <context ref="bnf-bar"/>
        <context ref="ident"/>
        <context ref="bnf-keywords"/>
        <context ref="line-comment"/>
        <context ref="syntax-style-section"/>
		<context ref="function-section"/>
      </include>
    </context>

	<context id="style-decl">
      <match>((?'id'\%{id})(\.(?'index'[0-9]*))?\s*(?'assgn'->))</match>
      <include>
        <context sub-pattern="id" style-ref="def:type"/>
        <context sub-pattern="assgn" style-ref="noise"/>
		<context sub-pattern="index" style-ref="def:constant"/>
      </include>
    </context>

    <context id="syntax-style-section">
      <start>(Syntax Style)</start>
      <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="style-decl"/>
        <context ref="token"/>
        <context ref="bnf-bar"/>
        <context ref="ident"/>
        <context ref="bnf-keywords"/>
        <context ref="line-comment"/>
        <context ref="function-section"/>
        <context ref="relation-section" />
      </include>
    </context>

    <context id="func-sign">
      <match>(^\s*(?'f'\%{id})[ \t]*:(?'type'(\%{id}|\s|->)*))</match>
      <include>
        <context sub-pattern="f" style-ref="def:identifier"/>
        <context sub-pattern="type" style-ref="def:type"/>
      </include>
    </context>

    <context id="func-clause" end-at-line-end="true">
    <start>(^\s*\%{id}\s*(?'parO'\())</start>
    <end>(\)\s*=)</end>
    <include>
      <context sub-pattern="0" where="start" style-ref="noise"/>
      <context sub-pattern="0" where="end" style-ref="noise"/>
      <context ref="token"/>
      <context ref="ascription"/>
    </include>
    </context>


    <context id="function-section">
      <start>(Functions)</start>
      <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="func-sign"/>
        <context ref="func-clause"/>
        <context ref="token"/>
        <context ref="ident"/>
        <context ref="line-comment"/>
        <context ref="relation-section"/>
       </include>
    </context>

   <context id="moded-type">
   <match>((?'id'\%{id})\s*(?'parO'\()(?'mode'in|out)(?'parC'\)))</match>
   <include>
     <context sub-pattern="parO" style-ref="noise"/>
     <context sub-pattern="parC" style-ref="noise"/>
     <context sub-pattern="id"   style-ref="def:type"/>
   </include>
   </context>

   <context id="relation-decl" end-at-line-end="true">
     <start>(^\s*(?'parO'\()(?'symbol'[^)]*)(?'parC'\)\s*:))</start>
     <include>
       <context sub-pattern="parO" where="start" style-ref="noise"/>
       <context sub-pattern="parC" where="start" style-ref="noise"/>
       <context sub-pattern="symbol" where="start" style-ref="rel-symb"/>
       <context ref="moded-type"/>
       <context ref="token"/>
       <context style-ref="noise"><keyword>Pronounced as</keyword></context>
     </include>
   </context>

    <context id="relation-section">
      <start>Relations</start>
      <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="relation-decl"/>
        <context ref="line-comment"/>
       <context ref="Rules-section"/>
      </include>
    </context>


    <context id="operator" style-ref="def:operator">
    <match>((?'symbol'[^()\[\]"[:alnum:]]*))</match>
    </context>

    <context id="line">
    <match>(^\s*(?'line'-+)\s*\s*(?'parO'\[)(?'name'[^\]]*)(?'parC'\]))</match>
    <include>
       <context sub-pattern="parO" style-ref="noise"/>
       <context sub-pattern="parC" style-ref="noise"/>
       <context sub-pattern="name" style-ref="def:identifier"/>
       <context sub-pattern="line" style-ref="noise"/>
    </include>
    </context>

    <context id="rule">
    <include>
      <context ref="token"/>
        <context ref="ascription" />
      <context ref="line"/>
      <context ref="operator"/>
    </include>
    </context>

    <context id="Rules-section">
    <start>(Rules)</start>
    <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="line-comment"/>
        <context ref="rule"/>
        <context ref="Properties-section"/>
    </include>
    </context>

    <context id="Properties-section">
    <start>(Properties)</start>
    <include>
        <context sub-pattern="0" where="start" style-ref="heading"/>
        <context once-only="true" style-ref="heading"><match>(=+)</match></context>
        <context ref="line-comment"/>
        <context ref="rule"/>
    </include>
    </context>

    <context id="language" class="no-spell-check">
      <include>
        <context ref="line-comment"/>
		<context ref="doc-title"/>
        <context ref="syntax-section"/>
        <context ref="line-comment"/>

      </include>
    </context>

  </definitions>
</language>
