 Demo
******

 Syntax
========

 int	::= Number
 var	::= Identifier
 term	::= "(" "\\" var ":" type "." expr ")" 
	| "(" expr ")" 
	| int | var
 expr	::= term "+" expr | term expr | term


 typeTerm	::= "Int" | "(" type ")"
 type		::= typeTerm "->" type | typeTerm


 typing		::= var ":" type
 typings	::= typing typings | "{}"


 Syntax Style
==============

 Number -> "constant"
 type -> "type"
 typeTerm -> "type"
 Identifier -> "identifier"


 Functions
===========


dom		: type -> type
dom("(" T ")")	= dom(T)
dom(("(" T1 ")") "->" T2)
		= T1
dom(T1 "->" T2)	= T1
dom("Int")	= !error("Undefined")

cod		: type -> type
cod("(" T ")")	= cod(T)
cod(T1 "->" ("(" T2 ")"))
		= T2
cod(T1 "->" T2)	= T2
cod("Int")	= !error("Undefined")




 Relations
===========

(→) : expr (in), expr (out)	Pronounced as "Smallstep"
(→*) : expr (in), expr (out)	Pronounced as "Bigstep"

(⊢) : typings (in), expr (in), type (out)	Pronounced as "Is typed as"
(::) : expr (in), type (out)

 Rules
=======


  i0:int	i1:int
 --------------------------- [EvalPlus]
  i0 "+" i1 → !plus(i0, i1)



  ------------------------------------------------------------------ [EvalApp]
   ("(" "\\" x ":" TArg "." expr ")") arg → !subs:expr(x, arg, expr)


  expr0 → expr1
 --------------------------- [EvalCtx]
  expr[expr0] → expr[expr1]
 




 i:int
--------- [BigStep Base]
 i →* i


 e0 → e1	e1 →* e2
-------------------------- [BigStep recursive]
 e0 →* e2





-------------------- [Tx]
Γ[x ":" t] ⊢ x, t



 i:int
-------------------- [TConstant]
 Γ ⊢ i, "Int"

 Γ ⊢ i0, "Int"		Γ ⊢ i1, "Int"
 -------------------------------------- [TPlus]
 Γ ⊢ i0 "+" i1 , "Int"


 (x ":" TArg) Γ ⊢ expr, TExpr
------------------------------------------------------------------- [TLambda]
 Γ ⊢ "(" "\\" x ":" TArg "." expr ")" , ( "(" TArg ")") "->" TExpr


 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ = dom(Tfunc) : type
-------------------------------------------------------------	[Tapp]
 Γ ⊢ e1 e2, cod(Tfunc)


"{}" ⊢ e, T
------------- [Typing in empty]
e :: T


