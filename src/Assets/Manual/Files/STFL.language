 
 STFL 
******

# A Simply Typed Functional Language

 Syntax
========

basetype::= "Bool" | "Int" | "(" type ")"
type	::= basetype "->" type | basetype

bool	::= "True" | "False"
int	::= Number
var	::= Identifier

expr	::= term "+" expr
	| term expr
	| term


term	::= "If" expr "Then" expr "Else" expr
	| "(" "\\" var ":" type "." expr ")"
	| bool
	| int
	| var
typing			::= var ":" type
typingEnvironment	::= typing "," typingEnvironment | "{}"

 Functions
===========


domain 				: type -> type
domain("(" T ")")		= domain(T)
domain(("(" T1 ")") "->" T2)	= T1
domain(T1 "->" T2)		= T1

codomain 			: type -> type
codomain("(" T ")")		= codomain(T)
codomain(T1"->" ("(" T2 ")")) 	= T2
codomain(T1 "->" T2)		= T2


 # Bit of buffer, just in case














 Relations
===========

(→)	: expr (in), expr (out)		Pronounced as "small step"
(→*)	: expr (in), expr (out)		Pronounced as "big step"
(✓)	: expr (in)			Pronounced as "is canonical"

(⊢)	: typingEnvironment (in), expr (in), type (out)	Pronounced as "entails typing"

(::)	: expr (in), type (out)	Pronounced as "type in empty context"

















 Rules
=======




 expr0 → expr1
----------------------------		[EvalCtx]
 expr[expr0] → expr[expr1]



 n1:Number		n2:Number
------------------------------------	[EvalPlus]
 n1 "+" n2 → !plus(n1, n2)




---------------------------------------		[EvalIfTrue]
 "If" "True" "Then" e1 "Else" e2 → e1


----------------------------------------	[EvalIfFalse]
 "If" "False" "Then" e1 "Else" e2 → e2


------------------------------------------------------	[EvalLamApp]
 ("(" "\\" var ":" type "." e ")") arg → !subs:expr(var, arg, e)




 i:int
-----------			[CanonInt]
 (✓) i


 b:bool
-----------			[CanonBool]
 (✓) b




 (✓) e
---------			[BigStepBase]
 e →* e

 e0 → e1	e1 →* e2
-------------------------	[BigStepRec]
 e0 →* e2





 "{}" ⊢ e, T  
-----------	[TEmptyCtx]
 e :: T




----------------	[TboolTrue]
 Γ ⊢ "True", "Bool"


----------------	[TboolFalse]
 Γ ⊢ "False", "Bool"


 n:int
---------------		[Tnumber] 
 Γ ⊢ n, "Int"








--------------------	[Tx]
 Γ[ x ":" T ] ⊢ x, T


 Γ ⊢ n1, "Int"	Γ ⊢ n2, "Int"
------------------------------				[TPlus]
 Γ ⊢ n1 "+" n2, "Int"


 Γ ⊢ c, "Bool"	Γ ⊢ e1, Tl	Γ ⊢ e2, Tr	Tl = Tr : type
--------------------------------------------------------------- [TIf]
 Γ ⊢ "If" c "Then" e1 "Else" e2, Tl



 (x ":" T1) "," Γ ⊢ e, T2
-------------------------------------------------------	[TLambda]
 Γ ⊢ "(" "\\" x ":" T1 "." e ")", ( "(" T1 ")") "->" T2



 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ = domain(Tfunc) : type
-------------------------------------------------------------	[Tapp]
 Γ ⊢ e1 e2, codomain(Tfunc)

























 Properties
============

 e0 :: T	 e0 → e1
-------------------------- [Preservation]
         e1 :: T


         e0 :: T
-------------------------- [Progress]
 (✓) e0    |     e0 → e1 



# STFL can't contain loops (or recursion), so will always terminate

 
 e :: T
-------- [Termination]
 e →* v 


