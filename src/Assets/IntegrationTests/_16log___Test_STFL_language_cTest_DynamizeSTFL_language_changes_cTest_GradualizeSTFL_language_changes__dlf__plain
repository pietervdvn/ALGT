Testcase 16
Test/STFL.language -c Test/DynamizeSTFL.language-changes -c Test/GradualizeSTFL.language-changes --dlf --plain

While checking file Test/STFL.language with changes: "Test/DynamizeSTFL.language-changes", "Test/GradualizeSTFL.language-changes":
  Warning:
    While checking the totality of function "defaultValue":
      Following calls will fall through:
        defaultValue("?")
    While checking the totality of function "equate":
      Following calls will fall through:
        equate("Bool", "Bool")
        equate("Bool", "Int")
        equate("Bool", (gtypeL "->" gtype))
        equate("Bool", ("(" gtype ")"))
        equate("Int", "Bool")
        equate("Int", "Int")
        equate("Int", (gtypeL "->" gtype))
        equate("Int", ("(" gtype ")"))
        equate((gtypeL "->" gtype), "Bool")
        equate((gtypeL "->" gtype), "Int")
        equate((gtypeL "->" gtype), ("(" gtype ")"))
        equate(("(" gtype ")"), "Bool")
        equate(("(" gtype ")"), "Int")
        equate(("(" gtype ")"), (gtypeL "->" gtype))
        equate(("(" gtype ")"), ("(" gtype ")"))
    While checking the totality of function "eval":
      Following calls will fall through:
        eval("TYPE ERROR")
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         

  Gradualized Dynamized STFL 
 ****************************


 Syntax 
========

bool             ::= "True"
                 | "False"
e                ::= eL "+" e
                 | eL "::" gtype
                 | eL e
                 | eL
eL               ::= value
                 | var
                 | "(" "\\" var ":" gtype "." e ")"
                 | "If" e "Then" e "Else" e
                 | "(" e ")"
                 | "TYPE ERROR"
gtype            ::= gtypeL "->" gtype
                 | gtypeL
gtypeL           ::= "Int"
                 | "Bool"
                 | "(" gtype ")"
                 | "?"
number           ::= Number
typing           ::= var ":" gtype
typingEnvironment::= typing "," typingEnvironment
                 | "{}"
value            ::= bool
                 | number
var              ::= Identifier



 Syntax Style 
==============

bool	-> "constant"
e	-> "statement"
eL	-> "statement"
eL.2	-> "noise"
eL.4	-> "noise"
gtype	-> "type"
gtypeL	-> "type"
number	-> "constant"
var	-> "identifier"




 Functions 
===========

cod                      : gtype -> gtype
cod("(" T ")")           = cod(T)
cod(T1 "->" T2)          = T2
cod("Bool")              = !error("Not defined for Bool")
cod("Int")               = !error("Not defined for Int")
cod("?")                 = "?"


defaultValue             : gtype -> eL
defaultValue("Bool")     = "True"
defaultValue("Int")      = 1
defaultValue(ta "->" tr) = "(" "\\" "x" ":" ta "." defaultValue(tr) ")"
defaultValue("(" T ")")  = defaultValue(T)


dom                      : gtype -> gtypeL
dom("(" T ")")           = dom(T)
dom(T1 "->" T2)          = T1
dom("Bool")              = !error("Not defined for Bool")
dom("Int")               = !error("Not defined for Int")
dom("?")                 = "?"


equate                   : gtype -> gtype -> gtype
equate(T, T)             = T
equate("?", t)           = t
equate(t, "?")           = t
equate(t11 "->" t12, t21 "->" t22)
                         = equate(t11, t21) "->" equate(t12, t22)


eval                     : e -> value
eval((v:value))          = v
eval(("(" "\\" x ":" t "." e ")") arg)
                         = eval(!subs:e(x, arg, e))
eval(f a)                = eval(eval(f) a)
eval("If" "True" "Then" e1 "Else" e2)
                         = eval(e1)
eval("If" "False" "Then" e1 "Else" e2)
                         = eval(e2)
eval("If" c "Then" e1 "Else" e2)
                         = eval("If" eval(c) "Then" e1 "Else" e2)
eval("(" e ")")          = eval(e)
eval(e1 "+" e2)          = !plus(eval(e1), eval(e2))
eval(e "::" t)           = eval(e)
eval((v:var))            = !error("Unknown variable", v)
eval("(" "\\" v ":" t "." e ")")
                         = !error("Lone lambda expression left")


plus                     : number -> e -> Number
plus(e1, e2)             = !plus(e1, e2)


rename                   : var -> var -> gtype -> e -> eL
rename(x, newVar, type, body)
                         = "(" "\\" newVar ":" type "." !subs:e(x, newVar, body) ")"




 Relations 
===========

(::) 	: e (in), gtype (out)	Pronounced as "type in empty context"
(~) 	: gtype (in), gtype (in)	Pronounced as "is consistent"
(→) 	: e (in), e (out)	Pronounced as "evaluation"
(→*) 	: e (in), value (out)	Pronounced as "big step"
(⊢) 	: typingEnvironment (in), e (in), gtype (out)	Pronounced as "context entails typing"
(✓) 	: e (in)	Pronounced as "is canonical"



 Rules 
=======



#  Rules about "type in empty context", with symbol (::) 
# -------------------------------------------------------


 "{}" ⊢ e, T
--------------  	[TEmptyCtx]
 e :: T






#  Rules about "is consistent", with symbol (~) 
# ----------------------------------------------


 
----------  	[ConsLeft]
 "?" ~ T


 
----------  	[ConsRight]
 T ~ "?"


 Ta1 ~ Ta2	Tb1 ~ Tb2
------------------------------  	[EqArrow]
 Ta1 "->" Tb1 ~ Ta2 "->" Tb2


 T1 = T2 : gtype
------------------  	[EqBase]
 T1 ~ T2






#  Rules about "evaluation", with symbol (→) 
# -------------------------------------------


 b: bool
--------------------  	[EvalAscrBool]
 b "::" "Bool" → b


 i: number
-------------------  	[EvalAscrInt]
 i "::" "Int" → i


 e: number
-------------------------------  	[EvalCastBoolErr]
 e "::" "Bool" → "TYPE ERROR"


 e: bool
------------------------------  	[EvalCastIntErr]
 e "::" "Int" → "TYPE ERROR"


 
-----------------  	[EvalCastUnkown]
 e "::" "?" → e


 e0 → e1
----------------  	[EvalCtx]
 e[e0] → e[e1]


 
--------------------------------------------------------  	[EvalIfErr]
 "If" (cond:number) "Then" e1 "Else" e2 → "TYPE ERROR"


 
----------------------------------------  	[EvalIfFalse]
 "If" "False" "Then" e1 "Else" e2 → e2


 
---------------------------------------  	[EvalIfTrue]
 "If" "True" "Then" e1 "Else" e2 → e1


 (✓) arg	arg "::" gtype → arg'
-----------------------------------------------------------------  	[EvalLamApp']
 ("(" "\\" var ":" gtype "." e ")") arg → !subs:e(var, arg', e)


 
----------------  	[EvalParens]
 "(" e ")" → e


 n1: Number	n2: Number
----------------------------  	[EvalPlus]
 n1 "+" n2 → plus(n1, n2)


 
----------------------------------  	[EvalPlusErrL]
 (n1:bool) "+" n2 → "TYPE ERROR"


 
----------------------------------  	[EvalPlusErrR]
 n1 "+" (n2:bool) → "TYPE ERROR"






#  Rules about "big step", with symbol (→*) 
# ------------------------------------------


 e0 → e1	(✓) e1
------------------------  	[BigStepBase]
 e0 →* e1


 (✓) e
---------  	[BigStepCanon]
 e →* e


 e0 → e1	e1 →* e2
--------------------------  	[BigStepRec]
 e0 →* e2






#  Rules about "context entails typing", with symbol (⊢) 
# -------------------------------------------------------


 Γ ⊢ e, T'	T' ~ T
------------------------  	[TAscr]
 Γ ⊢ e "::" T, T'


 Γ ⊢ c, "Bool"	Γ ⊢ e1, Tl	Γ ⊢ e2, Tr	Tl ~ Tr
---------------------------------------------------------  	[TIf]
 Γ ⊢ "If" c "Then" e1 "Else" e2, Tl


 (x ":" T1) "," Γ ⊢ e, T2
----------------------------------------------  	[TLambda]
 Γ ⊢ "(" "\\" x ":" T1 "." e ")", T1 "->" T2


 Γ ⊢ e, T
-------------------  	[TParens]
 Γ ⊢ "(" e ")", T


 Γ ⊢ n1, "Int"	Γ ⊢ n2, "Int"
-------------------------------  	[TPlus]
 Γ ⊢ n1 "+" n2, "Int"


 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ ~ dom(Tfunc)
---------------------------------------------------  	[Tapp]
 Γ ⊢ e1 e2, cod(Tfunc)


 b: bool
----------------  	[Tbool]
 Γ ⊢ b, "Bool"


 n: number
---------------  	[Tnumber]
 Γ ⊢ n, "Int"


 
--------------------  	[Tx]
 Γ[x ":" T] ⊢ x, T






#  Rules about "is canonical", with symbol (✓) 
# ---------------------------------------------


 b: bool
----------  	[CanonBool]
 (✓) b


 
-------------------  	[CanonError]
 (✓) "TYPE ERROR"


 n: number
------------  	[CanonNumber]
 (✓) n






 Properties 
============


 e0 :: T	e0 → e1
-------------------------  	[Preservation]
 e1 :: T


 e0 :: T
---------------------------  	[Progress]
 (✓) e0 	| e0 → e1


 e :: T
---------  	[Termination]
 e →* v


