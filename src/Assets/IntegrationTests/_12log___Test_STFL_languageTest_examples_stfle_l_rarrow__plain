Testcase 12
Test/STFL.language Test/examples.stfl e -l -r → --plain

While checking file Test/STFL.language:
  Warning:
    While checking the totality of function "equate":
      Following calls will fall through:
        equate(type, type)
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         
# Could not apply relation → to the input "True", because:
While trying to prove that (→) is applicable to "True":
  Not a single rule matched:
  While trying to intepret the rule EvalCtx with True:
    Evaluation contexts only searching within a parse tree and don't handle literals
  While trying to intepret the rule EvalPlus with True:
    :
      FT: Could not pattern match '"True"' over 'n1 "+" n2'
  While trying to intepret the rule EvalAscrBool with True:
    :
      FT: Could not pattern match '"True"' over 'b "::" "Bool"'
  While trying to intepret the rule EvalAscrInt with True:
    :
      FT: Could not pattern match '"True"' over 'i "::" "Int"'
  While trying to intepret the rule EvalParens with True:
    :
      FT: Could not pattern match '"True"' over '"(" e ")"'
  While trying to intepret the rule EvalIfTrue with True:
    :
      FT: Could not pattern match '"True"' over '"If" "True" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalIfFalse with True:
    :
      FT: Could not pattern match '"True"' over '"If" "False" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalLamApp with True:
    :
      FT: Could not pattern match '"True"' over '("(" "\\" var ":" type "." e ")") arg'
# Could not apply relation → to the input "False", because:
While trying to prove that (→) is applicable to "False":
  Not a single rule matched:
  While trying to intepret the rule EvalCtx with False:
    Evaluation contexts only searching within a parse tree and don't handle literals
  While trying to intepret the rule EvalPlus with False:
    :
      FT: Could not pattern match '"False"' over 'n1 "+" n2'
  While trying to intepret the rule EvalAscrBool with False:
    :
      FT: Could not pattern match '"False"' over 'b "::" "Bool"'
  While trying to intepret the rule EvalAscrInt with False:
    :
      FT: Could not pattern match '"False"' over 'i "::" "Int"'
  While trying to intepret the rule EvalParens with False:
    :
      FT: Could not pattern match '"False"' over '"(" e ")"'
  While trying to intepret the rule EvalIfTrue with False:
    :
      FT: Could not pattern match '"False"' over '"If" "True" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalIfFalse with False:
    :
      FT: Could not pattern match '"False"' over '"If" "False" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalLamApp with False:
    :
      FT: Could not pattern match '"False"' over '("(" "\\" var ":" type "." e ")") arg'
# If True Then False Else True applied to →
# Proof weight: 1, proof depth: 1


------------------------------------ [EvalIfTrue]
If True Then False Else True → False




# If (If True Then False Else True) Then False Else True applied to →
# Proof weight: 2, proof depth: 2


------------------------------------ [EvalIfTrue]
If True Then False Else True → False
-------------------------------------------------------------------------------------------- [EvalCtx]
If ( If True Then False Else True ) Then False Else True → If ( False ) Then False Else True




# Could not apply relation → to the input "42", because:
While trying to prove that (→) is applicable to "42":
  Not a single rule matched:
  While trying to intepret the rule EvalCtx with 42:
    Evaluation contexts only searching within a parse tree and don't handle literals
  While trying to intepret the rule EvalPlus with 42:
    :
      FT: Could not pattern match '42' over 'n1 "+" n2'
  While trying to intepret the rule EvalAscrBool with 42:
    :
      FT: Could not pattern match '42' over 'b "::" "Bool"'
  While trying to intepret the rule EvalAscrInt with 42:
    :
      FT: Could not pattern match '42' over 'i "::" "Int"'
  While trying to intepret the rule EvalParens with 42:
    :
      FT: Could not pattern match '42' over '"(" e ")"'
  While trying to intepret the rule EvalIfTrue with 42:
    :
      FT: Could not pattern match '42' over '"If" "True" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalIfFalse with 42:
    :
      FT: Could not pattern match '42' over '"If" "False" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalLamApp with 42:
    :
      FT: Could not pattern match '42' over '("(" "\\" var ":" type "." e ")") arg'
# 1 + 2 applied to →
# Proof weight: 3, proof depth: 2


1 : Number    2 : Number
------------------------ [EvalPlus]
1 + 2 → 3




# (\f : Int -> Int . f 5) (\i : Int . i + 1) applied to →
# Proof weight: 1, proof depth: 1


-------------------------------------------------------------------------- [EvalLamApp]
( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ) → ( \ i : Int . i + 1 ) 5




# (True) applied to →
# Proof weight: 1, proof depth: 1


--------------- [EvalParens]
( True ) → True




# False :: Bool applied to →
# Proof weight: 2, proof depth: 2


False : bool
--------------------- [EvalAscrBool]
False :: Bool → False




# ( True ) applied to →
# Proof weight: 1, proof depth: 1


--------------- [EvalParens]
( True ) → True




# (If True Then True Else True) :: Bool applied to →
# Proof weight: 2, proof depth: 2


---------------------------------- [EvalIfTrue]
If True Then True Else True → True
---------------------------------------------------------- [EvalCtx]
( If True Then True Else True ) :: Bool → ( True ) :: Bool




# Could not apply relation → to the input "True", because:
While trying to prove that (→) is applicable to "True":
  Not a single rule matched:
  While trying to intepret the rule EvalCtx with True:
    Evaluation contexts only searching within a parse tree and don't handle literals
  While trying to intepret the rule EvalPlus with True:
    :
      FT: Could not pattern match '"True"' over 'n1 "+" n2'
  While trying to intepret the rule EvalAscrBool with True:
    :
      FT: Could not pattern match '"True"' over 'b "::" "Bool"'
  While trying to intepret the rule EvalAscrInt with True:
    :
      FT: Could not pattern match '"True"' over 'i "::" "Int"'
  While trying to intepret the rule EvalParens with True:
    :
      FT: Could not pattern match '"True"' over '"(" e ")"'
  While trying to intepret the rule EvalIfTrue with True:
    :
      FT: Could not pattern match '"True"' over '"If" "True" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalIfFalse with True:
    :
      FT: Could not pattern match '"True"' over '"If" "False" "Then" e1 "Else" e2'
  While trying to intepret the rule EvalLamApp with True:
    :
      FT: Could not pattern match '"True"' over '("(" "\\" var ":" type "." e ")") arg'
# (False) applied to →
# Proof weight: 1, proof depth: 1


----------------- [EvalParens]
( False ) → False




# True :: Bool applied to →
# Proof weight: 2, proof depth: 2


True : bool
------------------- [EvalAscrBool]
True :: Bool → True




# If True Then 42 Else 43 applied to →
# Proof weight: 1, proof depth: 1


---------------------------- [EvalIfTrue]
If True Then 42 Else 43 → 42




# If False Then 23 Else 44 applied to →
# Proof weight: 1, proof depth: 1


----------------------------- [EvalIfFalse]
If False Then 23 Else 44 → 44




# 5 + 6 applied to →
# Proof weight: 3, proof depth: 2


5 : Number    6 : Number
------------------------ [EvalPlus]
5 + 6 → 11




# 5 + 6 + 7 applied to →
# Proof weight: 4, proof depth: 3


6 : Number    7 : Number
------------------------ [EvalPlus]
6 + 7 → 13
------------------------- [EvalCtx]
5 + 6 + 7 → 5 + 13




# (\x : Int . x + 1) 5 applied to →
# Proof weight: 1, proof depth: 1


------------------------------- [EvalLamApp]
( \ x : Int . x + 1 ) 5 → 5 + 1




# If (If True Then False Else True) Then 123456 Else 42 applied to →
# Proof weight: 2, proof depth: 2


------------------------------------ [EvalIfTrue]
If True Then False Else True → False
------------------------------------------------------------------------------------------ [EvalCtx]
If ( If True Then False Else True ) Then 123456 Else 42 → If ( False ) Then 123456 Else 42




# 5 + (6 + 7) applied to →
# Proof weight: 4, proof depth: 3


6 : Number    7 : Number
------------------------ [EvalPlus]
6 + 7 → 13
------------------------- [EvalCtx]
5 + ( 6 + 7 ) → 5 + ( 13 )




# (5 + 6) + (7 + 8) applied to →
# Proof weight: 4, proof depth: 3


5 : Number    6 : Number
------------------------ [EvalPlus]
5 + 6 → 11
------------------------------------------ [EvalCtx]
( 5 + 6 ) + ( 7 + 8 ) → ( 11 ) + ( 7 + 8 )




# 5 + (6 + (7 + 8)) applied to →
# Proof weight: 4, proof depth: 3


7 : Number    8 : Number
------------------------ [EvalPlus]
7 + 8 → 15
------------------------------------------ [EvalCtx]
5 + ( 6 + ( 7 + 8 ) ) → 5 + ( 6 + ( 15 ) )




# (\x : Int . x + 1) True applied to →
# Proof weight: 1, proof depth: 1


------------------------------------- [EvalLamApp]
( \ x : Int . x + 1 ) True → True + 1




# ((\a : Int . (\b : Int . a + b)) 41) 1 applied to →
# Proof weight: 2, proof depth: 2


----------------------------------------------------------------- [EvalLamApp]
( \ a : Int . ( \ b : Int . a + b ) ) 41 → ( \ b : Int . 41 + b )
-------------------------------------------------------------------- [EvalCtx]
( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1 → ( ( \ b : Int . 41 + b ) ) 1




