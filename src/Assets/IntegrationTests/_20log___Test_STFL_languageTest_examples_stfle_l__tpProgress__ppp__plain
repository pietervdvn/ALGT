Testcase 20
Test/STFL.language Test/examples.stfl e -l --tp Progress --ppp --plain

While checking file Test/STFL.language:
  Warning:
    While checking the totality of function "equate":
      Following calls will fall through:
        equate(type, type)
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         
Property Progress holds for given examples                                      
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> True}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TEmptyCtx]
    True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # (✓) e0
  
  True : bool
  ----------- [CanonBool]
  (✓) True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> False}
  # Predicate satisfied:
  # e0 :: T
  
    False : bool
    ---------------- [Tbool]
    {} ⊢ False, Bool
    ------------------------ [TEmptyCtx]
    False :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # (✓) e0
  
  False : bool
  ------------ [CanonBool]
  (✓) False
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> If True Then False Else True}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                False : bool                True : bool                T1 = Bool = T2
    --------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]
    {} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool
    --------------------------------------------------------------------------------------------------- [TIf]
    {} ⊢ If True Then False Else True, Bool
    --------------------------------------------------------------------------------------------- [TEmptyCtx]
    If True Then False Else True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ------------------------------------ [EvalIfTrue]
  If True Then False Else True → False
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> If ( If True Then False Else True ) Then False Else True}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                False : bool                True : bool                T1 = Bool = T2                                                                    
    --------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]                                                           
    {} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool                                                                      
    --------------------------------------------------------------------------------------------------- [TIf]                                                           
    {} ⊢ If True Then False Else True, Bool                                                                      False : bool                True : bool                T1 = Bool = T2
    ----------------------------------------------------------------------------------------------- [TParens]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]
    {} ⊢ ( If True Then False Else True ), Bool                                                                  {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TIf]
    {} ⊢ If ( If True Then False Else True ) Then False Else True, Bool
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
    If ( If True Then False Else True ) Then False Else True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ------------------------------------ [EvalIfTrue]
  If True Then False Else True → False
  -------------------------------------------------------------------------------------------- [EvalCtx]
  If ( If True Then False Else True ) Then False Else True → If ( False ) Then False Else True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 42}
  # Predicate satisfied:
  # e0 :: T
  
    42 : number
    ------------ [Tnumber]
    {} ⊢ 42, Int
    ---------------------- [TEmptyCtx]
    42 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # (✓) e0
  
  42 : number
  ----------- [CanonNumber]
  (✓) 42
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 1 + 2}
  # Predicate satisfied:
  # e0 :: T
  
    1 : number               2 : number
    ----------- [Tnumber]    ----------- [Tnumber]
    {} ⊢ 1, Int              {} ⊢ 2, Int
    -------------------------------------- [TPlus]
    {} ⊢ 1 + 2, Int
    ---------------------------------- [TEmptyCtx]
    1 + 2 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  1 : Number    2 : Number
  ------------------------ [EvalPlus]
  1 + 2 → 3
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> ( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 )}
  # Predicate satisfied:
  # e0 :: T
  
                                                5 : number                                T1 = Int = T2                                           1 : number                         
    ----------------------------------- [Tx]    ---------------------------- [Tnumber]    ------------- [EqBase]    --------------------- [Tx]    --------------------- [Tnumber]    
    f : Int -> Int , {} ⊢ f, Int -> Int         f : Int -> Int , {} ⊢ 5, Int              Int == Int                i : Int , {} ⊢ i, Int         i : Int , {} ⊢ 1, Int              
    ----------------------------------------------------------------------------------------------------- [Tapp]    ----------------------------------------------------- [TPlus]    
    f : Int -> Int , {} ⊢ f 5, Int                                                                                  i : Int , {} ⊢ i + 1, Int                                        T1 = Int -> Int = T2
    -------------------------------------------------------------------------------------------------- [TLambda]    --------------------------------------------------- [TLambda]    ------------------------ [EqBase]
    {} ⊢ ( \ f : Int -> Int . f 5 ), Int -> Int -> Int                                                              {} ⊢ ( \ i : Int . i + 1 ), Int -> Int                           Int -> Int == Int -> Int
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [Tapp]
    {} ⊢ ( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ), Int
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ [TEmptyCtx]
    ( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ) :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  -------------------------------------------------------------------------- [EvalLamApp]
  ( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ) → ( \ i : Int . i + 1 ) 5
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> ( True )}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TParens]
    {} ⊢ ( True ), Bool
    --------------------------------- [TEmptyCtx]
    ( True ) :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  --------------- [EvalParens]
  ( True ) → True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> False :: Bool}
  # Predicate satisfied:
  # e0 :: T
  
    False : bool                T1 = Bool = T2
    ---------------- [Tbool]    -------------- [EqBase]
    {} ⊢ False, Bool            Bool == Bool
    ------------------------------------------- [TAscr]
    {} ⊢ False :: Bool, Bool
    --------------------------------------- [TEmptyCtx]
    False :: Bool :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  False : bool
  --------------------- [EvalAscrBool]
  False :: Bool → False
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> ( True )}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TParens]
    {} ⊢ ( True ), Bool
    --------------------------------- [TEmptyCtx]
    ( True ) :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  --------------- [EvalParens]
  ( True ) → True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> ( If True Then True Else True ) :: Bool}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                True : bool                True : bool                T1 = Bool = T2             
    --------------- [Tbool]    --------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]    
    {} ⊢ True, Bool            {} ⊢ True, Bool            {} ⊢ True, Bool            Bool == Bool               
    -------------------------------------------------------------------------------------------------- [TIf]    
    {} ⊢ If True Then True Else True, Bool                                                                      T1 = Bool = T2
    ---------------------------------------------------------------------------------------------- [TParens]    -------------- [EqBase]
    {} ⊢ ( If True Then True Else True ), Bool                                                                  Bool == Bool
    --------------------------------------------------------------------------------------------------------------------------- [TAscr]
    {} ⊢ ( If True Then True Else True ) :: Bool, Bool
    ----------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
    ( If True Then True Else True ) :: Bool :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ---------------------------------- [EvalIfTrue]
  If True Then True Else True → True
  ---------------------------------------------------------- [EvalCtx]
  ( If True Then True Else True ) :: Bool → ( True ) :: Bool
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> True}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TEmptyCtx]
    True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # (✓) e0
  
  True : bool
  ----------- [CanonBool]
  (✓) True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> ( False )}
  # Predicate satisfied:
  # e0 :: T
  
    False : bool
    ---------------- [Tbool]
    {} ⊢ False, Bool
    ------------------------ [TParens]
    {} ⊢ ( False ), Bool
    ---------------------------------- [TEmptyCtx]
    ( False ) :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ----------------- [EvalParens]
  ( False ) → False
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> True :: Bool}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                T1 = Bool = T2
    --------------- [Tbool]    -------------- [EqBase]
    {} ⊢ True, Bool            Bool == Bool
    ------------------------------------------ [TAscr]
    {} ⊢ True :: Bool, Bool
    -------------------------------------- [TEmptyCtx]
    True :: Bool :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  True : bool
  ------------------- [EvalAscrBool]
  True :: Bool → True
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> If True Then 42 Else 43}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                42 : number               43 : number               T1 = Int = T2
    --------------- [Tbool]    ------------ [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
    {} ⊢ True, Bool            {} ⊢ 42, Int              {} ⊢ 43, Int              Int == Int
    ----------------------------------------------------------------------------------------------- [TIf]
    {} ⊢ If True Then 42 Else 43, Int
    ----------------------------------------------------------------------------------------- [TEmptyCtx]
    If True Then 42 Else 43 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ---------------------------- [EvalIfTrue]
  If True Then 42 Else 43 → 42
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> If False Then 23 Else 44}
  # Predicate satisfied:
  # e0 :: T
  
    False : bool                23 : number               44 : number               T1 = Int = T2
    ---------------- [Tbool]    ------------ [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
    {} ⊢ False, Bool            {} ⊢ 23, Int              {} ⊢ 44, Int              Int == Int
    ------------------------------------------------------------------------------------------------ [TIf]
    {} ⊢ If False Then 23 Else 44, Int
    ------------------------------------------------------------------------------------------ [TEmptyCtx]
    If False Then 23 Else 44 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ----------------------------- [EvalIfFalse]
  If False Then 23 Else 44 → 44
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 5 + 6}
  # Predicate satisfied:
  # e0 :: T
  
    5 : number               6 : number
    ----------- [Tnumber]    ----------- [Tnumber]
    {} ⊢ 5, Int              {} ⊢ 6, Int
    -------------------------------------- [TPlus]
    {} ⊢ 5 + 6, Int
    ---------------------------------- [TEmptyCtx]
    5 + 6 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  5 : Number    6 : Number
  ------------------------ [EvalPlus]
  5 + 6 → 11
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 5 + 6 + 7}
  # Predicate satisfied:
  # e0 :: T
  
                             6 : number               7 : number
                             ----------- [Tnumber]    ----------- [Tnumber]
    5 : number               {} ⊢ 6, Int              {} ⊢ 7, Int
    ----------- [Tnumber]    -------------------------------------- [TPlus]
    {} ⊢ 5, Int              {} ⊢ 6 + 7, Int
    --------------------------------------------------------------- [TPlus]
    {} ⊢ 5 + 6 + 7, Int
    ----------------------------------------------------------- [TEmptyCtx]
    5 + 6 + 7 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  6 : Number    7 : Number
  ------------------------ [EvalPlus]
  6 + 7 → 13
  ------------------------- [EvalCtx]
  5 + 6 + 7 → 5 + 13
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> ( \ x : Int . x + 1 ) 5}
  # Predicate satisfied:
  # e0 :: T
  
                                  1 : number                                                  
    --------------------- [Tx]    --------------------- [Tnumber]                             
    x : Int , {} ⊢ x, Int         x : Int , {} ⊢ 1, Int                                       
    ----------------------------------------------------- [TPlus]                             
    x : Int , {} ⊢ x + 1, Int                                        5 : number               T1 = Int = T2
    --------------------------------------------------- [TLambda]    ----------- [Tnumber]    ------------- [EqBase]
    {} ⊢ ( \ x : Int . x + 1 ), Int -> Int                           {} ⊢ 5, Int              Int == Int
    --------------------------------------------------------------------------------------------------------- [Tapp]
    {} ⊢ ( \ x : Int . x + 1 ) 5, Int
    ---------------------------------------------------------------------------------------------------- [TEmptyCtx]
    ( \ x : Int . x + 1 ) 5 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ------------------------------- [EvalLamApp]
  ( \ x : Int . x + 1 ) 5 → 5 + 1
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> If ( If True Then False Else True ) Then 123456 Else 42}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool                False : bool                True : bool                T1 = Bool = T2                                                                     
    --------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]                                                            
    {} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool                                                                       
    --------------------------------------------------------------------------------------------------- [TIf]                                                            
    {} ⊢ If True Then False Else True, Bool                                                                      123456 : number               42 : number               T1 = Int = T2
    ----------------------------------------------------------------------------------------------- [TParens]    ---------------- [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
    {} ⊢ ( If True Then False Else True ), Bool                                                                  {} ⊢ 123456, Int              {} ⊢ 42, Int              Int == Int
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TIf]
    {} ⊢ If ( If True Then False Else True ) Then 123456 Else 42, Int
    ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
    If ( If True Then False Else True ) Then 123456 Else 42 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ------------------------------------ [EvalIfTrue]
  If True Then False Else True → False
  ------------------------------------------------------------------------------------------ [EvalCtx]
  If ( If True Then False Else True ) Then 123456 Else 42 → If ( False ) Then 123456 Else 42
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 5 + ( 6 + 7 )}
  # Predicate satisfied:
  # e0 :: T
  
                             6 : number               7 : number
                             ----------- [Tnumber]    ----------- [Tnumber]
                             {} ⊢ 6, Int              {} ⊢ 7, Int
                             -------------------------------------- [TPlus]
    5 : number               {} ⊢ 6 + 7, Int
    ----------- [Tnumber]    ------------------------------------ [TParens]
    {} ⊢ 5, Int              {} ⊢ ( 6 + 7 ), Int
    --------------------------------------------------------------- [TPlus]
    {} ⊢ 5 + ( 6 + 7 ), Int
    ----------------------------------------------------------- [TEmptyCtx]
    5 + ( 6 + 7 ) :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  6 : Number    7 : Number
  ------------------------ [EvalPlus]
  6 + 7 → 13
  ------------------------- [EvalCtx]
  5 + ( 6 + 7 ) → 5 + ( 13 )
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> ( 5 + 6 ) + ( 7 + 8 )}
  # Predicate satisfied:
  # e0 :: T
  
    5 : number               6 : number               7 : number               8 : number
    ----------- [Tnumber]    ----------- [Tnumber]    ----------- [Tnumber]    ----------- [Tnumber]
    {} ⊢ 5, Int              {} ⊢ 6, Int              {} ⊢ 7, Int              {} ⊢ 8, Int
    -------------------------------------- [TPlus]    -------------------------------------- [TPlus]
    {} ⊢ 5 + 6, Int                                   {} ⊢ 7 + 8, Int
    ------------------------------------ [TParens]    ------------------------------------ [TParens]
    {} ⊢ ( 5 + 6 ), Int                               {} ⊢ ( 7 + 8 ), Int
    ---------------------------------------------------------------------------------------- [TPlus]
    {} ⊢ ( 5 + 6 ) + ( 7 + 8 ), Int
    ------------------------------------------------------------------------------------ [TEmptyCtx]
    ( 5 + 6 ) + ( 7 + 8 ) :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  5 : Number    6 : Number
  ------------------------ [EvalPlus]
  5 + 6 → 11
  ------------------------------------------ [EvalCtx]
  ( 5 + 6 ) + ( 7 + 8 ) → ( 11 ) + ( 7 + 8 )
  
  
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> 5 + ( 6 + ( 7 + 8 ) )}
  # Predicate satisfied:
  # e0 :: T
  
                                                      7 : number               8 : number
                                                      ----------- [Tnumber]    ----------- [Tnumber]
                                                      {} ⊢ 7, Int              {} ⊢ 8, Int
                                                      -------------------------------------- [TPlus]
                             6 : number               {} ⊢ 7 + 8, Int
                             ----------- [Tnumber]    ------------------------------------ [TParens]
                             {} ⊢ 6, Int              {} ⊢ ( 7 + 8 ), Int
                             --------------------------------------------------------------- [TPlus]
    5 : number               {} ⊢ 6 + ( 7 + 8 ), Int
    ----------- [Tnumber]    ------------------------------------------------------------- [TParens]
    {} ⊢ 5, Int              {} ⊢ ( 6 + ( 7 + 8 ) ), Int
    ---------------------------------------------------------------------------------------- [TPlus]
    {} ⊢ 5 + ( 6 + ( 7 + 8 ) ), Int
    ------------------------------------------------------------------------------------ [TEmptyCtx]
    5 + ( 6 + ( 7 + 8 ) ) :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  7 : Number    8 : Number
  ------------------------ [EvalPlus]
  7 + 8 → 15
  ------------------------------------------ [EvalCtx]
  5 + ( 6 + ( 7 + 8 ) ) → 5 + ( 6 + ( 15 ) )
  
  
Property successfull
# Property Progress proven by failing predicate with assignment {e0 --> ( \ x : Int . x + 1 ) True}:
  # Failed: e0 :: T
# e0 :: T failed because: 
  While trying to prove that (::) is applicable to "( \ x : Int . x + 1 ) True":
    Not a single rule matched:
    While trying to intepret the rule TEmptyCtx with ( \ x : Int . x + 1 ) True:
      While trying to prove that (⊢) is applicable to "{}, ( \ x : Int . x + 1 ) True":
        Not a single rule matched:
        While trying to intepret the rule Tnumber with {}, ( \ x : Int . x + 1 ) True:
          n = ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True" is not a "number" but a "e"
        While trying to intepret the rule Tbool with {}, ( \ x : Int . x + 1 ) True:
          b = ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True" is not a "bool" but a "e"
        While trying to intepret the rule TParens with {}, ( \ x : Int . x + 1 ) True:
          Sequence lengths are not the same: "(" e ")" /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
        While trying to intepret the rule TAscr with {}, ( \ x : Int . x + 1 ) True:
          Sequence lengths are not the same: e "::" T /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
        While trying to intepret the rule Tx with {}, ( \ x : Int . x + 1 ) True:
          Evaluation contexts only searching within a parse tree and don't handle literals
        While trying to intepret the rule TPlus with {}, ( \ x : Int . x + 1 ) True:
          Sequence lengths are not the same: n1 "+" n2 /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
        While trying to intepret the rule TIf with {}, ( \ x : Int . x + 1 ) True:
          Sequence lengths are not the same: "If" c "Then" e1 "Else" e2 /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
        While trying to intepret the rule TLambda with {}, ( \ x : Int . x + 1 ) True:
          Sequence lengths are not the same: "(" "\\" x ":" T1 "." e ")" /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
        While trying to intepret the rule Tapp with {}, ( \ x : Int . x + 1 ) True:
          While trying to prove that (==) is applicable to "Bool, Int":
            Not a single rule matched:
            While trying to intepret the rule EqBase with Bool, Int:
              Equality predicate not met: T1="Bool" /= "Int"=T2
            While trying to intepret the rule EqArrow with Bool, Int:
              :
                FT: Could not pattern match '"Bool"' over 'Ta1 "->" Tb1'
Property successfull
# Property Progress statisfied with assignment {T --> Int, e0 --> ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1}
  # Predicate satisfied:
  # e0 :: T
  
    ------------------------------- [Tx]    ------------------------------- [Tx]                                                                                 
    b : Int , a : Int , {} ⊢ a, Int         b : Int , a : Int , {} ⊢ b, Int                                                                                      
    -------------------------------------------------------------------- [TPlus]                                                                                 
    b : Int , a : Int , {} ⊢ a + b, Int                                                                                                                          
    ------------------------------------------------------------------ [TLambda]                                                                                 
    a : Int , {} ⊢ ( \ b : Int . a + b ), Int -> Int                                41 : number               T1 = Int = T2                                      
    ------------------------------------------------------------------ [TLambda]    ------------ [Tnumber]    ------------- [EqBase]                             
    {} ⊢ ( \ a : Int . ( \ b : Int . a + b ) ), Int -> Int -> Int                   {} ⊢ 41, Int              Int == Int                                         
    ------------------------------------------------------------------------------------------------------------------------- [Tapp]                             
    {} ⊢ ( \ a : Int . ( \ b : Int . a + b ) ) 41, Int -> Int                                                                           1 : number               T1 = Int = T2
    ---------------------------------------------------------------------------------------------------------------------- [TParens]    ----------- [Tnumber]    ------------- [EqBase]
    {} ⊢ ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ), Int -> Int                                                                       {} ⊢ 1, Int              Int == Int
    ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [Tapp]
    {} ⊢ ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1, Int
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
    ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1 :: Int
  
  
  
  # Satisfies a possible conclusion:
  # e0 → e1
  
  ----------------------------------------------------------------- [EvalLamApp]
  ( \ a : Int . ( \ b : Int . a + b ) ) 41 → ( \ b : Int . 41 + b )
  -------------------------------------------------------------------- [EvalCtx]
  ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1 → ( ( \ b : Int . 41 + b ) ) 1
  
  
