Testcase 3
Test/STFL.language --ia --plain

While checking file Test/STFL.language:
  Warning:
    While checking the totality of function "equate":
      Following calls will fall through:
        equate(type, type)
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         

 Analysis of cod : type -> type 
================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      cod("(" T ")")           = cod(T)
    
    Possible inputs at this point: 
    #  (type)
    
    
    Possible results: 
    0   ("(" type(0/1/2:1) ")"): typeL/2	--> type( (Function call - ID not retrievable)) : "type"
    
    
    
    
    
     Analysis of clause 1 
    ......................
    
    Clause: 
      cod(T1 "->" T2)          = T2
    
    Possible inputs at this point: 
    #  ("Bool")
    #  ("Int")
    #  ((typeL "->" type))
    
    
    Possible results: 
    1   (typeL(0/0:0) "->" type(0/0:2)): type/0	--> type(0/0:2)     : "type"
    
    
    
    
    
     Analysis of clause 2 
    ......................
    
    Clause: 
      cod("Bool")              = !error("Not defined for Bool")
    
    Possible inputs at this point: 
    #  ("Bool")
    #  ("Int")
    
    
    Possible results: 
    2   "Bool"                    	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
    
     Analysis of clause 3 
    ......................
    
    Clause: 
      cod("Int")               = !error("Not defined for Int")
    
    Possible inputs at this point: 
    #  ("Int")
    
    
    Possible results: 
    3   "Int"                     	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  type
  

 Analysis of defaultValue : type -> eL 
=======================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      defaultValue("Bool")     = "True"
    
    Possible inputs at this point: 
    #  (type)
    
    
    Possible results: 
    0   "Bool"                    	--> "True"          : "bool"
    
    
    
    
    
     Analysis of clause 1 
    ......................
    
    Clause: 
      defaultValue("Int")      = 1
    
    Possible inputs at this point: 
    #  ("Int")
    #  ((typeL "->" type))
    #  (("(" type ")"))
    
    
    Possible results: 
    1   "Int"                     	--> "1"             : "number"
    
    
    
    
    
     Analysis of clause 2 
    ......................
    
    Clause: 
      defaultValue(ta "->" tr) = "(" "\\" "x" ":" ta "." defaultValue(tr) ")"
    
    Possible inputs at this point: 
    #  ((typeL "->" type))
    #  (("(" type ")"))
    
    
    Possible results: 
    2   (typeL(0/0:0) "->" type(0/0:2)): type/0	--> ("(" "\\" "x" ":" typeL(0/0:0) "." eL( (Function call - ID not retrievable)) ")"): eL/2 : "eL"
    
    
    
    
    
     Analysis of clause 3 
    ......................
    
    Clause: 
      defaultValue("(" T ")")  = defaultValue(T)
    
    Possible inputs at this point: 
    #  (("(" type ")"))
    
    
    Possible results: 
    3   ("(" type(0/1/2:1) ")"): typeL/2	--> eL( (Function call - ID not retrievable)) : "eL"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  eL
  

 Analysis of dom : type -> typeL 
=================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      dom("(" T ")")           = dom(T)
    
    Possible inputs at this point: 
    #  (type)
    
    
    Possible results: 
    0   ("(" type(0/1/2:1) ")"): typeL/2	--> typeL( (Function call - ID not retrievable)) : "typeL"
    
    
    
    
    
     Analysis of clause 1 
    ......................
    
    Clause: 
      dom(T1 "->" T2)          = T1
    
    Possible inputs at this point: 
    #  ("Bool")
    #  ("Int")
    #  ((typeL "->" type))
    
    
    Possible results: 
    1   (typeL(0/0:0) "->" type(0/0:2)): type/0	--> typeL(0/0:0)    : "typeL"
    
    
    
    
    
     Analysis of clause 2 
    ......................
    
    Clause: 
      dom("Bool")              = !error("Not defined for Bool")
    
    Possible inputs at this point: 
    #  ("Bool")
    #  ("Int")
    
    
    Possible results: 
    2   "Bool"                    	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
    
     Analysis of clause 3 
    ......................
    
    Clause: 
      dom("Int")               = !error("Not defined for Int")
    
    Possible inputs at this point: 
    #  ("Int")
    
    
    Possible results: 
    3   "Int"                     	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  typeL,typeL
  

 Analysis of equate : type -> type -> type 
===========================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      equate(T, T)             = T
    
    Possible inputs at this point: 
    #  (type, type)
    
    
    Possible results: 
    0   type(0) , type(0)         	--> type(0)         : "type"
    
    This clause uses equality in the patterns and might not match. No arguments are thus used in this abstract interpretation.
    
    
    
  
   Falthrough 
  ------------
  
  (type, type)
  
  
  
   Possible results 
  ------------------
  
  type
  

 Analysis of eval : e -> value 
===============================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      eval((v:value))          = v
    
    Possible inputs at this point: 
    #  (e)
    
    
    Possible results: 
    0   value(0/3/0)              	--> value(0/3/0)    : "value"
    
    
    
    
    
     Analysis of clause 1 
    ......................
    
    Clause: 
      eval(("(" "\\" x ":" t "." e ")") arg)
                               = eval(!subs:e(x, arg, e))
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  ((eL e))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("If" e "Then" e "Else" e))
    #  (("(" e ")"))
    
    
    Possible results: 
    1   (("(" "\\" var(0/2:0/2:2) ":" type(0/2:0/2:4) "." e(0/2:0/2:6) ")"): eL/2 e(0/2:1)): e/2	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 2 
    ......................
    
    Clause: 
      eval(f a)                = eval(eval(f) a)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  ((value e))
    #  ((var e))
    #  ((("If" e "Then" e "Else" e) e))
    #  ((("(" e ")") e))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("If" e "Then" e "Else" e))
    #  (("(" e ")"))
    
    
    Possible results: 
    2   (value(0/2:0/0) e(0/2:1)): e/2	--> value( (Function call - ID not retrievable)) : "value"
    2   (var(0/2:0/1) e(0/2:1)): e/2	--> value( (Function call - ID not retrievable)) : "value"
    2   (("If" e(0/2:0/3:1) "Then" e(0/2:0/3:3) "Else" e(0/2:0/3:5)): eL/3 e(0/2:1)): e/2	--> value( (Function call - ID not retrievable)) : "value"
    2   (("(" e(0/2:0/4:1) ")"): eL/4 e(0/2:1)): e/2	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 3 
    ......................
    
    Clause: 
      eval("If" "True" "Then" e1 "Else" e2)
                               = eval(e1)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("If" e "Then" e "Else" e))
    #  (("(" e ")"))
    
    
    Possible results: 
    3   ("If" "True" "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 4 
    ......................
    
    Clause: 
      eval("If" "False" "Then" e1 "Else" e2)
                               = eval(e2)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("If" var "Then" e "Else" e))
    #  (("If" number "Then" e "Else" e))
    #  (("If" "False" "Then" e "Else" e))
    #  (("If" (eL "+" e) "Then" e "Else" e))
    #  (("If" (eL "::" type) "Then" e "Else" e))
    #  (("If" (eL e) "Then" e "Else" e))
    #  (("If" ("(" "\\" var ":" type "." e ")") "Then" e "Else" e))
    #  (("If" ("If" e "Then" e "Else" e) "Then" e "Else" e))
    #  (("If" ("(" e ")") "Then" e "Else" e))
    #  (("(" e ")"))
    
    
    Possible results: 
    4   ("If" "False" "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 5 
    ......................
    
    Clause: 
      eval("If" c "Then" e1 "Else" e2)
                               = eval("If" eval(c) "Then" e1 "Else" e2)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("If" var "Then" e "Else" e))
    #  (("If" number "Then" e "Else" e))
    #  (("If" (eL "+" e) "Then" e "Else" e))
    #  (("If" (eL "::" type) "Then" e "Else" e))
    #  (("If" (eL e) "Then" e "Else" e))
    #  (("If" ("(" "\\" var ":" type "." e ")") "Then" e "Else" e))
    #  (("If" ("If" e "Then" e "Else" e) "Then" e "Else" e))
    #  (("If" ("(" e ")") "Then" e "Else" e))
    #  (("(" e ")"))
    
    
    Possible results: 
    5   ("If" var(0/3/3:1/3/1) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" number(0/3/3:1/3/0/1) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" (eL(0/3/3:1/0:0) "+" e(0/3/3:1/0:2)): e/0 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" (eL(0/3/3:1/1:0) "::" type(0/3/3:1/1:2)): e/1 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" (eL(0/3/3:1/2:0) e(0/3/3:1/2:1)): e/2 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" ("(" "\\" var(0/3/3:1/3/2:2) ":" type(0/3/3:1/3/2:4) "." e(0/3/3:1/3/2:6) ")"): eL/2 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" ("If" e(0/3/3:1/3/3:1) "Then" e(0/3/3:1/3/3:3) "Else" e(0/3/3:1/3/3:5)): eL/3 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    5   ("If" ("(" e(0/3/3:1/3/4:1) ")"): eL/4 "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 6 
    ......................
    
    Clause: 
      eval("(" e ")")          = eval(e)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    #  (("(" e ")"))
    
    
    Possible results: 
    6   ("(" e(0/3/4:1) ")"): eL/4	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 7 
    ......................
    
    Clause: 
      eval(e1 "+" e2)          = !plus(eval(e1), eval(e2))
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "+" e))
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    
    
    Possible results: 
    7   (eL(0/0:0) "+" e(0/0:2)): e/0	--> Number( (Function call - ID not retrievable)) : "Number"
    
    
    
    
    
     Analysis of clause 8 
    ......................
    
    Clause: 
      eval(e "::" t)           = eval(e)
    
    Possible inputs at this point: 
    #  (var)
    #  ((eL "::" type))
    #  (("(" "\\" var ":" type "." e ")"))
    
    
    Possible results: 
    8   (eL(0/1:0) "::" type(0/1:2)): e/1	--> value( (Function call - ID not retrievable)) : "value"
    
    
    
    
    
     Analysis of clause 9 
    ......................
    
    Clause: 
      eval((v:var))            = !error("Unknown variable", v)
    
    Possible inputs at this point: 
    #  (var)
    #  (("(" "\\" var ":" type "." e ")"))
    
    
    Possible results: 
    9   var(0/3/1)                	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
    
     Analysis of clause 10 
    .......................
    
    Clause: 
      eval("(" "\\" v ":" t "." e ")")
                               = !error("Lone lambda expression left")
    
    Possible inputs at this point: 
    #  (("(" "\\" var ":" type "." e ")"))
    
    
    Possible results: 
    10   ("(" "\\" var(0/3/2:2) ":" type(0/3/2:4) "." e(0/3/2:6) ")"): eL/2	--> ɛ( (Function call - ID not retrievable)) : "\603"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  value,value
  

 Analysis of plus : number -> e -> Number 
==========================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      plus(e1, e2)             = !plus(e1, e2)
    
    Possible inputs at this point: 
    #  (number, e)
    
    
    Possible results: 
    0   number(0) , e(1)          	--> Number( (Function call - ID not retrievable)) : "Number"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  Number
  

 Analysis of rename : var -> var -> type -> e -> eL 
====================================================

    
     Analysis of clause 0 
    ......................
    
    Clause: 
      rename(x, newVar, type, body)
                               = "(" "\\" newVar ":" type "." !subs:e(x, newVar, body) ")"
    
    Possible inputs at this point: 
    #  (var, var, type, e)
    
    
    Possible results: 
    0   var(0) , var(1) , type(2) , e(3)	--> ("(" "\\" var(1) ":" type(2) "." e( (Function call - ID not retrievable)) ")"): eL/2 : "eL"
    
    
    
    
  
   Falthrough 
  ------------
  
  No fallthrough is possible
  
  
   Possible results 
  ------------------
  
  ("(" "\\" var ":" type "." e ")")
  
