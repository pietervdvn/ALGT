Output {_files = fromList [], _stdOut = ["While checking file Test/STFL.language:","  Warning:","    While checking the totality of function \"equate\":","      Following calls will fall through:","        equate(type, type)","    ","Done quickchecking property Preservation with 8 examples                        ","Done quickchecking property Progress with 8 examples                            ","Done quickchecking property Termination with 8 examples                         ","","  STFL "," ******","",""," Syntax ","========","","bool             ::= \"True\"","                 | \"False\"","e                ::= eL \"+\" e","                 | eL \"::\" type","                 | eL e","                 | eL","eL               ::= value","                 | var","                 | \"(\" \"\\\\\" var \":\" type \".\" e \")\"","                 | \"If\" e \"Then\" e \"Else\" e","                 | \"(\" e \")\"","number           ::= Number","type             ::= typeL \"->\" type","                 | typeL","typeL            ::= \"Int\"","                 | \"Bool\"","                 | \"(\" type \")\"","typing           ::= var \":\" type","typingEnvironment::= typing \",\" typingEnvironment","                 | \"{}\"","value            ::= bool","                 | number","var              ::= Identifier","","",""," Syntax Style ","==============","","bool\t-> \"constant\"","e\t-> \"statement\"","eL\t-> \"statement\"","eL.2\t-> \"noise\"","eL.4\t-> \"noise\"","number\t-> \"constant\"","type\t-> \"type\"","typeL\t-> \"type\"","var\t-> \"identifier\"","","","",""," Functions ","===========","","cod                      : type -> type","cod(\"(\" T \")\")           = cod(T)","cod(T1 \"->\" T2)          = T2","cod(\"Bool\")              = !error(\"Not defined for Bool\")","cod(\"Int\")               = !error(\"Not defined for Int\")","","","defaultValue             : type -> eL","defaultValue(\"Bool\")     = \"True\"","defaultValue(\"Int\")      = 1","defaultValue(ta \"->\" tr) = \"(\" \"\\\\\" \"x\" \":\" ta \".\" defaultValue(tr) \")\"","defaultValue(\"(\" T \")\")  = defaultValue(T)","","","dom                      : type -> typeL","dom(\"(\" T \")\")           = dom(T)","dom(T1 \"->\" T2)          = T1","dom(\"Bool\")              = !error(\"Not defined for Bool\")","dom(\"Int\")               = !error(\"Not defined for Int\")","","","equate                   : type -> type -> type","equate(T, T)             = T","","","eval                     : e -> value","eval((v:value))          = v","eval((\"(\" \"\\\\\" x \":\" t \".\" e \")\") arg)","                         = eval(!subs:e(x, arg, e))","eval(f a)                = eval(eval(f) a)","eval(\"If\" \"True\" \"Then\" e1 \"Else\" e2)","                         = eval(e1)","eval(\"If\" \"False\" \"Then\" e1 \"Else\" e2)","                         = eval(e2)","eval(\"If\" c \"Then\" e1 \"Else\" e2)","                         = eval(\"If\" eval(c) \"Then\" e1 \"Else\" e2)","eval(\"(\" e \")\")          = eval(e)","eval(e1 \"+\" e2)          = !plus(eval(e1), eval(e2))","eval(e \"::\" t)           = eval(e)","eval((v:var))            = !error(\"Unknown variable\", v)","eval(\"(\" \"\\\\\" v \":\" t \".\" e \")\")","                         = !error(\"Lone lambda expression left\")","","","plus                     : number -> e -> Number","plus(e1, e2)             = !plus(e1, e2)","","","rename                   : var -> var -> type -> e -> eL","rename(x, newVar, type, body)","                         = \"(\" \"\\\\\" newVar \":\" type \".\" !subs:e(x, newVar, body) \")\"","","","",""," Relations ","===========","","(\8594) \t: e (in), e (out)\tPronounced as \"evaluation\"","(\8594*) \t: e (in), value (out)\tPronounced as \"big step\"","(\10003) \t: e (in)\tPronounced as \"is canonical\"","(\8866) \t: typingEnvironment (in), e (in), type (out)\tPronounced as \"context entails typing\"","(::) \t: e (in), type (out)\tPronounced as \"type in empty context\"","(==) \t: type (in), type (in)\tPronounced as \"equals\"","","",""," Rules ","=======","","","","#  Rules about \"evaluation\", with symbol (\8594) ","# -------------------------------------------","",""," e0 \8594 e1","----------------  \t[EvalCtx]"," e[e0] \8594 e[e1]","",""," n1: Number\tn2: Number","----------------------------  \t[EvalPlus]"," n1 \"+\" n2 \8594 plus(n1, n2)","",""," b: bool","--------------------  \t[EvalAscrBool]"," b \"::\" \"Bool\" \8594 b","",""," i: number","-------------------  \t[EvalAscrInt]"," i \"::\" \"Int\" \8594 i","",""," ","----------------  \t[EvalParens]"," \"(\" e \")\" \8594 e","",""," ","---------------------------------------  \t[EvalIfTrue]"," \"If\" \"True\" \"Then\" e1 \"Else\" e2 \8594 e1","",""," ","----------------------------------------  \t[EvalIfFalse]"," \"If\" \"False\" \"Then\" e1 \"Else\" e2 \8594 e2","",""," ","---------------------------------------------------------------  \t[EvalLamApp]"," (\"(\" \"\\\\\" var \":\" type \".\" e \")\") arg \8594 !subs:e(var, arg, e)","","","","","","","#  Rules about \"big step\", with symbol (\8594*) ","# ------------------------------------------","",""," (\10003) e","---------  \t[BigStepCanon]"," e \8594* e","",""," e0 \8594 e1\te1 \8594* e2","--------------------------  \t[BigStepRec]"," e0 \8594* e2","",""," e0 \8594 e1\t(\10003) e1","------------------------  \t[BigStepBase]"," e0 \8594* e1","","","","","","","#  Rules about \"is canonical\", with symbol (\10003) ","# ---------------------------------------------","",""," b: bool","----------  \t[CanonBool]"," (\10003) b","",""," n: number","------------  \t[CanonNumber]"," (\10003) n","","","","","","","#  Rules about \"context entails typing\", with symbol (\8866) ","# -------------------------------------------------------","",""," n: number","---------------  \t[Tnumber]"," \915 \8866 n, \"Int\"","",""," b: bool","----------------  \t[Tbool]"," \915 \8866 b, \"Bool\"","",""," \915 \8866 e, T","-------------------  \t[TParens]"," \915 \8866 \"(\" e \")\", T","",""," \915 \8866 e, T'\tT' == T","-------------------------  \t[TAscr]"," \915 \8866 e \"::\" T, T'","",""," ","--------------------  \t[Tx]"," \915[x \":\" T] \8866 x, T","",""," \915 \8866 n1, \"Int\"\t\915 \8866 n2, \"Int\"","-------------------------------  \t[TPlus]"," \915 \8866 n1 \"+\" n2, \"Int\"","",""," \915 \8866 c, \"Bool\"\t\915 \8866 e1, Tl\t\915 \8866 e2, Tr\tTl == Tr","----------------------------------------------------------  \t[TIf]"," \915 \8866 \"If\" c \"Then\" e1 \"Else\" e2, Tl","",""," (x \":\" T1) \",\" \915 \8866 e, T2","----------------------------------------------  \t[TLambda]"," \915 \8866 \"(\" \"\\\\\" x \":\" T1 \".\" e \")\", T1 \"->\" T2","",""," \915 \8866 e1, Tfunc\t\915 \8866 e2, Targ\tTarg == dom(Tfunc)","----------------------------------------------------  \t[Tapp]"," \915 \8866 e1 e2, cod(Tfunc)","","","","","","","#  Rules about \"type in empty context\", with symbol (::) ","# -------------------------------------------------------","",""," \"{}\" \8866 e, T","--------------  \t[TEmptyCtx]"," e :: T","","","","","","","#  Rules about \"equals\", with symbol (==) ","# ----------------------------------------","",""," T1 = T2 : type","-----------------  \t[EqBase]"," T1 == T2","",""," Ta1 == Ta2\tTb1 == Tb2","-------------------------------  \t[EqArrow]"," Ta1 \"->\" Tb1 == Ta2 \"->\" Tb2","","","","","",""," Properties ","============","",""," e0 :: T\te0 \8594 e1","-------------------------  \t[Preservation]"," e1 :: T","",""," e0 :: T","---------------------------  \t[Progress]"," (\10003) e0 \t| e0 \8594 e1","",""," e :: T","---------  \t[Termination]"," e \8594* v","",""]}