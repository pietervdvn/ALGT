Testcase 13
Test/STFL.language Test/examples.stfl e -l -r :: --plain

While checking file Test/STFL.language:
  Warning:
    While checking the totality of function "equate":
      Following calls will fall through:
        equate(type, type)
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         
# True applied to ::
# Proof weight: 3, proof depth: 3


True : bool
--------------- [Tbool]
{} ⊢ True, Bool
----------------------- [TEmptyCtx]
True :: Bool




# False applied to ::
# Proof weight: 3, proof depth: 3


False : bool
---------------- [Tbool]
{} ⊢ False, Bool
------------------------ [TEmptyCtx]
False :: Bool




# If True Then False Else True applied to ::
# Proof weight: 10, proof depth: 4


True : bool                False : bool                True : bool                T1 = Bool = T2
--------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]
{} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool
--------------------------------------------------------------------------------------------------- [TIf]
{} ⊢ If True Then False Else True, Bool
--------------------------------------------------------------------------------------------- [TEmptyCtx]
If True Then False Else True :: Bool




# If (If True Then False Else True) Then False Else True applied to ::
# Proof weight: 18, proof depth: 6


True : bool                False : bool                True : bool                T1 = Bool = T2                                                                    
--------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]                                                           
{} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool                                                                      
--------------------------------------------------------------------------------------------------- [TIf]                                                           
{} ⊢ If True Then False Else True, Bool                                                                      False : bool                True : bool                T1 = Bool = T2
----------------------------------------------------------------------------------------------- [TParens]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]
{} ⊢ ( If True Then False Else True ), Bool                                                                  {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TIf]
{} ⊢ If ( If True Then False Else True ) Then False Else True, Bool
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
If ( If True Then False Else True ) Then False Else True :: Bool




# 42 applied to ::
# Proof weight: 3, proof depth: 3


42 : number
------------ [Tnumber]
{} ⊢ 42, Int
---------------------- [TEmptyCtx]
42 :: Int




# 1 + 2 applied to ::
# Proof weight: 6, proof depth: 4


1 : number               2 : number
----------- [Tnumber]    ----------- [Tnumber]
{} ⊢ 1, Int              {} ⊢ 2, Int
-------------------------------------- [TPlus]
{} ⊢ 1 + 2, Int
---------------------------------- [TEmptyCtx]
1 + 2 :: Int




# (\f : Int -> Int . f 5) (\i : Int . i + 1) applied to ::
# Proof weight: 16, proof depth: 6


                                            5 : number                                T1 = Int = T2                                           1 : number                         
----------------------------------- [Tx]    ---------------------------- [Tnumber]    ------------- [EqBase]    --------------------- [Tx]    --------------------- [Tnumber]    
f : Int -> Int , {} ⊢ f, Int -> Int         f : Int -> Int , {} ⊢ 5, Int              Int == Int                i : Int , {} ⊢ i, Int         i : Int , {} ⊢ 1, Int              
----------------------------------------------------------------------------------------------------- [Tapp]    ----------------------------------------------------- [TPlus]    
f : Int -> Int , {} ⊢ f 5, Int                                                                                  i : Int , {} ⊢ i + 1, Int                                        T1 = Int -> Int = T2
-------------------------------------------------------------------------------------------------- [TLambda]    --------------------------------------------------- [TLambda]    ------------------------ [EqBase]
{} ⊢ ( \ f : Int -> Int . f 5 ), Int -> Int -> Int                                                              {} ⊢ ( \ i : Int . i + 1 ), Int -> Int                           Int -> Int == Int -> Int
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ ( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ), Int
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ [TEmptyCtx]
( \ f : Int -> Int . f 5 ) ( \ i : Int . i + 1 ) :: Int




# (True) applied to ::
# Proof weight: 4, proof depth: 4


True : bool
--------------- [Tbool]
{} ⊢ True, Bool
----------------------- [TParens]
{} ⊢ ( True ), Bool
--------------------------------- [TEmptyCtx]
( True ) :: Bool




# False :: Bool applied to ::
# Proof weight: 6, proof depth: 4


False : bool                T1 = Bool = T2
---------------- [Tbool]    -------------- [EqBase]
{} ⊢ False, Bool            Bool == Bool
------------------------------------------- [TAscr]
{} ⊢ False :: Bool, Bool
--------------------------------------- [TEmptyCtx]
False :: Bool :: Bool




# ( True ) applied to ::
# Proof weight: 4, proof depth: 4


True : bool
--------------- [Tbool]
{} ⊢ True, Bool
----------------------- [TParens]
{} ⊢ ( True ), Bool
--------------------------------- [TEmptyCtx]
( True ) :: Bool




# (If True Then True Else True) :: Bool applied to ::
# Proof weight: 14, proof depth: 6


True : bool                True : bool                True : bool                T1 = Bool = T2             
--------------- [Tbool]    --------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]    
{} ⊢ True, Bool            {} ⊢ True, Bool            {} ⊢ True, Bool            Bool == Bool               
-------------------------------------------------------------------------------------------------- [TIf]    
{} ⊢ If True Then True Else True, Bool                                                                      T1 = Bool = T2
---------------------------------------------------------------------------------------------- [TParens]    -------------- [EqBase]
{} ⊢ ( If True Then True Else True ), Bool                                                                  Bool == Bool
--------------------------------------------------------------------------------------------------------------------------- [TAscr]
{} ⊢ ( If True Then True Else True ) :: Bool, Bool
----------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
( If True Then True Else True ) :: Bool :: Bool




# True applied to ::
# Proof weight: 3, proof depth: 3


True : bool
--------------- [Tbool]
{} ⊢ True, Bool
----------------------- [TEmptyCtx]
True :: Bool




# (False) applied to ::
# Proof weight: 4, proof depth: 4


False : bool
---------------- [Tbool]
{} ⊢ False, Bool
------------------------ [TParens]
{} ⊢ ( False ), Bool
---------------------------------- [TEmptyCtx]
( False ) :: Bool




# True :: Bool applied to ::
# Proof weight: 6, proof depth: 4


True : bool                T1 = Bool = T2
--------------- [Tbool]    -------------- [EqBase]
{} ⊢ True, Bool            Bool == Bool
------------------------------------------ [TAscr]
{} ⊢ True :: Bool, Bool
-------------------------------------- [TEmptyCtx]
True :: Bool :: Bool




# If True Then 42 Else 43 applied to ::
# Proof weight: 10, proof depth: 4


True : bool                42 : number               43 : number               T1 = Int = T2
--------------- [Tbool]    ------------ [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
{} ⊢ True, Bool            {} ⊢ 42, Int              {} ⊢ 43, Int              Int == Int
----------------------------------------------------------------------------------------------- [TIf]
{} ⊢ If True Then 42 Else 43, Int
----------------------------------------------------------------------------------------- [TEmptyCtx]
If True Then 42 Else 43 :: Int




# If False Then 23 Else 44 applied to ::
# Proof weight: 10, proof depth: 4


False : bool                23 : number               44 : number               T1 = Int = T2
---------------- [Tbool]    ------------ [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
{} ⊢ False, Bool            {} ⊢ 23, Int              {} ⊢ 44, Int              Int == Int
------------------------------------------------------------------------------------------------ [TIf]
{} ⊢ If False Then 23 Else 44, Int
------------------------------------------------------------------------------------------ [TEmptyCtx]
If False Then 23 Else 44 :: Int




# 5 + 6 applied to ::
# Proof weight: 6, proof depth: 4


5 : number               6 : number
----------- [Tnumber]    ----------- [Tnumber]
{} ⊢ 5, Int              {} ⊢ 6, Int
-------------------------------------- [TPlus]
{} ⊢ 5 + 6, Int
---------------------------------- [TEmptyCtx]
5 + 6 :: Int




# 5 + 6 + 7 applied to ::
# Proof weight: 9, proof depth: 5


                         6 : number               7 : number
                         ----------- [Tnumber]    ----------- [Tnumber]
5 : number               {} ⊢ 6, Int              {} ⊢ 7, Int
----------- [Tnumber]    -------------------------------------- [TPlus]
{} ⊢ 5, Int              {} ⊢ 6 + 7, Int
--------------------------------------------------------------- [TPlus]
{} ⊢ 5 + 6 + 7, Int
----------------------------------------------------------- [TEmptyCtx]
5 + 6 + 7 :: Int




# (\x : Int . x + 1) 5 applied to ::
# Proof weight: 11, proof depth: 6


                              1 : number                                                  
--------------------- [Tx]    --------------------- [Tnumber]                             
x : Int , {} ⊢ x, Int         x : Int , {} ⊢ 1, Int                                       
----------------------------------------------------- [TPlus]                             
x : Int , {} ⊢ x + 1, Int                                        5 : number               T1 = Int = T2
--------------------------------------------------- [TLambda]    ----------- [Tnumber]    ------------- [EqBase]
{} ⊢ ( \ x : Int . x + 1 ), Int -> Int                           {} ⊢ 5, Int              Int == Int
--------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ ( \ x : Int . x + 1 ) 5, Int
---------------------------------------------------------------------------------------------------- [TEmptyCtx]
( \ x : Int . x + 1 ) 5 :: Int




# If (If True Then False Else True) Then 123456 Else 42 applied to ::
# Proof weight: 18, proof depth: 6


True : bool                False : bool                True : bool                T1 = Bool = T2                                                                     
--------------- [Tbool]    ---------------- [Tbool]    --------------- [Tbool]    -------------- [EqBase]                                                            
{} ⊢ True, Bool            {} ⊢ False, Bool            {} ⊢ True, Bool            Bool == Bool                                                                       
--------------------------------------------------------------------------------------------------- [TIf]                                                            
{} ⊢ If True Then False Else True, Bool                                                                      123456 : number               42 : number               T1 = Int = T2
----------------------------------------------------------------------------------------------- [TParens]    ---------------- [Tnumber]    ------------ [Tnumber]    ------------- [EqBase]
{} ⊢ ( If True Then False Else True ), Bool                                                                  {} ⊢ 123456, Int              {} ⊢ 42, Int              Int == Int
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TIf]
{} ⊢ If ( If True Then False Else True ) Then 123456 Else 42, Int
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
If ( If True Then False Else True ) Then 123456 Else 42 :: Int




# 5 + (6 + 7) applied to ::
# Proof weight: 10, proof depth: 6


                         6 : number               7 : number
                         ----------- [Tnumber]    ----------- [Tnumber]
                         {} ⊢ 6, Int              {} ⊢ 7, Int
                         -------------------------------------- [TPlus]
5 : number               {} ⊢ 6 + 7, Int
----------- [Tnumber]    ------------------------------------ [TParens]
{} ⊢ 5, Int              {} ⊢ ( 6 + 7 ), Int
--------------------------------------------------------------- [TPlus]
{} ⊢ 5 + ( 6 + 7 ), Int
----------------------------------------------------------- [TEmptyCtx]
5 + ( 6 + 7 ) :: Int




# (5 + 6) + (7 + 8) applied to ::
# Proof weight: 14, proof depth: 6


5 : number               6 : number               7 : number               8 : number
----------- [Tnumber]    ----------- [Tnumber]    ----------- [Tnumber]    ----------- [Tnumber]
{} ⊢ 5, Int              {} ⊢ 6, Int              {} ⊢ 7, Int              {} ⊢ 8, Int
-------------------------------------- [TPlus]    -------------------------------------- [TPlus]
{} ⊢ 5 + 6, Int                                   {} ⊢ 7 + 8, Int
------------------------------------ [TParens]    ------------------------------------ [TParens]
{} ⊢ ( 5 + 6 ), Int                               {} ⊢ ( 7 + 8 ), Int
---------------------------------------------------------------------------------------- [TPlus]
{} ⊢ ( 5 + 6 ) + ( 7 + 8 ), Int
------------------------------------------------------------------------------------ [TEmptyCtx]
( 5 + 6 ) + ( 7 + 8 ) :: Int




# 5 + (6 + (7 + 8)) applied to ::
# Proof weight: 14, proof depth: 8


                                                  7 : number               8 : number
                                                  ----------- [Tnumber]    ----------- [Tnumber]
                                                  {} ⊢ 7, Int              {} ⊢ 8, Int
                                                  -------------------------------------- [TPlus]
                         6 : number               {} ⊢ 7 + 8, Int
                         ----------- [Tnumber]    ------------------------------------ [TParens]
                         {} ⊢ 6, Int              {} ⊢ ( 7 + 8 ), Int
                         --------------------------------------------------------------- [TPlus]
5 : number               {} ⊢ 6 + ( 7 + 8 ), Int
----------- [Tnumber]    ------------------------------------------------------------- [TParens]
{} ⊢ 5, Int              {} ⊢ ( 6 + ( 7 + 8 ) ), Int
---------------------------------------------------------------------------------------- [TPlus]
{} ⊢ 5 + ( 6 + ( 7 + 8 ) ), Int
------------------------------------------------------------------------------------ [TEmptyCtx]
5 + ( 6 + ( 7 + 8 ) ) :: Int




# Could not apply relation :: to the input "(\\x : Int . x + 1) True", because:
While trying to prove that (::) is applicable to "( \ x : Int . x + 1 ) True":
  Not a single rule matched:
  While trying to intepret the rule TEmptyCtx with ( \ x : Int . x + 1 ) True:
    While trying to prove that (⊢) is applicable to "{}, ( \ x : Int . x + 1 ) True":
      Not a single rule matched:
      While trying to intepret the rule Tnumber with {}, ( \ x : Int . x + 1 ) True:
        n = ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True" is not a "number" but a "e"
      While trying to intepret the rule Tbool with {}, ( \ x : Int . x + 1 ) True:
        b = ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True" is not a "bool" but a "e"
      While trying to intepret the rule TParens with {}, ( \ x : Int . x + 1 ) True:
        Sequence lengths are not the same: "(" e ")" /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
      While trying to intepret the rule TAscr with {}, ( \ x : Int . x + 1 ) True:
        Sequence lengths are not the same: e "::" T /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
      While trying to intepret the rule Tx with {}, ( \ x : Int . x + 1 ) True:
        Evaluation contexts only searching within a parse tree and don't handle literals
      While trying to intepret the rule TPlus with {}, ( \ x : Int . x + 1 ) True:
        Sequence lengths are not the same: n1 "+" n2 /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
      While trying to intepret the rule TIf with {}, ( \ x : Int . x + 1 ) True:
        Sequence lengths are not the same: "If" c "Then" e1 "Else" e2 /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
      While trying to intepret the rule TLambda with {}, ( \ x : Int . x + 1 ) True:
        Sequence lengths are not the same: "(" "\\" x ":" T1 "." e ")" /= ("(" "\\" "x" ":" "Int" "." ("x" "+" 1) ")") "True"
      While trying to intepret the rule Tapp with {}, ( \ x : Int . x + 1 ) True:
        While trying to prove that (==) is applicable to "Bool, Int":
          Not a single rule matched:
          While trying to intepret the rule EqBase with Bool, Int:
            Equality predicate not met: T1="Bool" /= "Int"=T2
          While trying to intepret the rule EqArrow with Bool, Int:
            :
              FT: Could not pattern match '"Bool"' over 'Ta1 "->" Tb1'
# ((\a : Int . (\b : Int . a + b)) 41) 1 applied to ::
# Proof weight: 17, proof depth: 8


------------------------------- [Tx]    ------------------------------- [Tx]                                                                                 
b : Int , a : Int , {} ⊢ a, Int         b : Int , a : Int , {} ⊢ b, Int                                                                                      
-------------------------------------------------------------------- [TPlus]                                                                                 
b : Int , a : Int , {} ⊢ a + b, Int                                                                                                                          
------------------------------------------------------------------ [TLambda]                                                                                 
a : Int , {} ⊢ ( \ b : Int . a + b ), Int -> Int                                41 : number               T1 = Int = T2                                      
------------------------------------------------------------------ [TLambda]    ------------ [Tnumber]    ------------- [EqBase]                             
{} ⊢ ( \ a : Int . ( \ b : Int . a + b ) ), Int -> Int -> Int                   {} ⊢ 41, Int              Int == Int                                         
------------------------------------------------------------------------------------------------------------------------- [Tapp]                             
{} ⊢ ( \ a : Int . ( \ b : Int . a + b ) ) 41, Int -> Int                                                                           1 : number               T1 = Int = T2
---------------------------------------------------------------------------------------------------------------------- [TParens]    ----------- [Tnumber]    ------------- [EqBase]
{} ⊢ ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ), Int -> Int                                                                       {} ⊢ 1, Int              Int == Int
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ ( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1, Int
----------------------------------------------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
( ( \ a : Int . ( \ b : Int . a + b ) ) 41 ) 1 :: Int




