 
 LSec 
******

# Security language by ZDancewic 2002, as given by Ronald Garcia and Éric Tanter in Deriving a Simple Gradual Security Language (2006)

 Syntax
========

# Variable
x	::= Identifier

# Public < Restricted < CIA < TOP
# Public < Restricted < NSA < TOP
# NSA and CIA are not supposed to know each other secrets
levels	::= "Public" | "Restricted" | "CIA" | "NSA" | "TOP"

label	::= levels | "(" label "⋎" label ")" | "(" label "⋏" label ")"

bool	::= "True" | "False"
type	::= "Bool" label | "(" type "→" label type ")"
# raw term
r	::= bool | "(" "λ" x ":" type "." t ")"
v	::= r label

t	::= tL t | tL op t | tL "::" type | tL "⋎" label | tL 
# T without left recursion
tL	::= v | x | "If" t "Then" t "Else" t | "(" t ")"

# Operations
op	::= "∨" | "∧" | "⇒"


typing			::= x ":" type
typingEnvironment	::= typing "," typingEnvironment | "$"


 Functions
===========



and	: bool -> bool -> bool
and("True", "True")	= "True"
and("True", "False")	= "False"
and("False", "True")	= "False"
and("False", "False")	= "False"


or	: bool -> bool -> bool
or("True","True")	= "True"
or("True","False")	= "True"
or("False","True")	= "True"
or("False","False")	= "False"


imp	: bool -> bool -> bool
imp("True","True")	= "True"
imp("True","False")	= "False"
imp("False","True")	= "True"
imp("False","False")	= "True"


joinL	: levels -> levels -> levels
joinL("TOP", _)
	= "TOP"
joinL(_, "TOP")
	= "TOP"
joinL("NSA", "CIA")
	= "TOP"
joinL("CIA", "NSA")
	= "TOP"
joinL("NSA", _)
	= "NSA"
joinL(_, "NSA")
	= "NSA"
joinL("CIA", _)
	= "CIA"
joinL(_, "CIA")
	= "CIA"
joinL("Restricted", _)
	= "Restricted"
joinL(_, "Restricted")
	= "Restricted"
joinL("Public", "Public")
	= "Public"



# " ∨
join	: type -> type -> type
join("Bool" l0, "Bool" l1)
	= "Bool" joinL(l0, l1) 
join("(" t11 "→" l0 t12 ")", "(" t21 "→" l1 t22 ")")
	= "(" join(t11, t21) "→" joinL(l0, l1) join(t21, t22) ")"
join(t0, t1)
	= !error:type("Undefined")


meetL	: label -> label -> label
meetL("Public", _)
	= "Public"
meetL(_, "Public")
	= "Public"
meetL("Restricted", _)
	= "Restricted"
meetL(_, "Restricted")
	= "Restricted"
meetL("NSA", "CIA")
	= "Restricted"
meetL("CIA", "NSA")
	= "Restricted"
meetL("CIA", _)
	= "CIA"
meetL(_, "CIA")
	= "CIA"
meetL("NSA", _)
	= "NSA"
meetL(_, "NSA")
	= "NSA"
meetL("TOP", "TOP")
	= "TOP"


# " ∨
meet	: type -> type -> type
meet("Bool" l0, "Bool" l1)
	= "Bool" meetL(l0, l1) 
meet("(" t11 "→" l0 t12 ")", "(" t21 "→" l1 t22 ")")
	= "(" meet(t11, t21) "→" meetL(l0, l1) meet(t21, t22) ")"
meet(t0, t1)
	= !error:type("Undefined")


stamp	: type -> label -> type
stamp("Bool" l1, l2)	= "Bool" ("(" l1 "⋎" l2 ")")
stamp("(" S1 "→" l1 S2 ")", l2)= "(" S1 "→" ("(" l1 "⋎" l2 ")") S2 ")"



dom	: type -> type
dom( "(" type "→" label _ ")")
	= type


cod	: type -> type
cod( "(" _ "→" label type ")")
	= type


 Relations
===========

(→)	: t (in), t (out)	Pronounced as "small step"
(→*)	: t (in), t (out)	Pronounced as "big step"
(⊢)	: typingEnvironment (in), t (in), type (out)	Pronounced as "context entails typing"

(<:)	: type (in), type (in)	Pronounced as "is subtype of"
(≼)	: label (in), label (in)	Pronounced as "is less secure"
#(::)	: e (in), type (out)	Pronounced as "type in empty context"
#(==)	: type (in), type (in)	Pronounced as "equals"
(✓)	: t (in)		Pronounced as "is canonical"

 Rules
=======


-------------------	[Sx]
 Γ[x ":" S] ⊢ x, S


--------------------------	[Sb]
 _ ⊢ (bool l:v), "Bool" l


 (x ":" S1) "," Γ ⊢ t, S2
----------------------------------------------------	[Sλ]
 Γ ⊢ ( "(" "λ" x ":" S1 "." t ")" ) l , "(" S1 "→" l S2 ")"


Γ ⊢ t1 , "Bool" l1	Γ ⊢ t2 , "Bool" l2
--------------------------------------------- [SOp]
Γ ⊢ t1 op t2, "Bool" ("(" l1 "⋎" l2 ")")


Γ ⊢ t, "Bool" l		Γ ⊢ t1, S1	Γ ⊢ t2, S2
---------------------------------------------------- [SIf]
Γ ⊢ "If" t "Then" t1 "Else" t2, join



Γ ⊢ t1 , "(" S11 "→" l S12 ")"		Γ ⊢ t2 , S2	S2 <: S11
------------------------------------------------------------------- [SApp]
Γ ⊢ t1 op t2, "Bool" ("(" l1 "⋎" l2 ")")




Γ ⊢ t , S1	S1 <: S21
-------------------------- [S::]
Γ ⊢ t "::" S2 , S2



Γ ⊢ t, S
-------------------------------- [S⋎]
Γ ⊢ t "⋎" label  , stamp(S, label)





l0 ≼ l1
------------------------ [Subtyping Base] 
"Bool" l0 <: "Bool" l1


S21 <: S11	S12 <: S22	l1 ≼ l2
-------------------------------------------------- [Subtyping Curry]
"(" S11 "→" l1 S12 ")" <: "(" S21 "→" l2 S22 ")" 










------ [LRefl]
l ≼ l


------------------------ [LPub]
"Public" ≼ "Restricted"



-------------------- [LCIA]
"Restricted"  ≼ "CIA"



-------------------- [LNSA]
"Restricted"  ≼ "NSA"


-------------- [LCIATop]
"CIA"  ≼ "TOP"

-------------- [LNSATop]
"NSA"  ≼ "TOP"




------------------------------------------------------------- [EvalOpDisj]
((b1:bool) l1) "∨" ((b2:bool) l2) → or(b1, b2) joinL(l1, l2)



-------------------------------------------------------------- [EvalOpConj]
((b1:bool) l1) "∧" ((b2:bool) l2) → and(b1, b2) joinL(l1, l2)




-------------------------------------------------------------- [EvalOpImp]
((b1:bool) l1) "⇒" ((b2:bool) l2) → imp(b1, b2) joinL(l1, l2)




 v:v
------------------------------------------------------ [EvalApp]
 (("(" "λ" x ":" S "." t ")") l) v  → !subs:tL(x, v, t) "⋎" l


 t1:v		t2:v
------------------------------------------------------- [EvalIfTrue]
 "If" (("True":bool) l) "Then" t1 "Else" t2 → t1 "⋎" l

 t1:v		t2:v
-------------------------------------------------------- [EvalIfFalse]
 "If" (("False":bool) l) "Then" t1 "Else" t2 → t2 "⋎" l


------------------------------- [SecrecyMerging]
 (r l1) "⋎" l2 → r joinL(l1, l2)


 t:v
---------------- [EvalPar]
 "(" t ")" → t



   t1 → t2
---------------- [EvalCtx]
 f[t1] → f[t2]



  
 ---------------- [IsCanon]
  (✓) (b:bool) l



 (✓) v
--------- [BaseBigStep]
 v →* v


 t0 → t1	t1 →* t2
-------------------------- [RecBigStep]
 t0 →* t2


# Properties
#============

# e0 :: T	 e0 → e1
#-------------------------- [Preservation]
#         e1 :: T


#         e0 :: T
#-------------------------- [Progress]
# (✓) e0    |     e0 → e1 


