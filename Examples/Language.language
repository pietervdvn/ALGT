
 Language
**********

 Syntax
========


### Helpers, such as lines or single characters

nl		::= "\n"

stars	::= $ "*" stars | "*"
equals	::= $ "=" equals | "="
tabs	//= "\t" tabs | "\t"

string	::= String



commentLine	::= LineChar commentLine | LineChar
comment		::= $ "#" commentLine

nlc 		::= comment nl	 | nl
strictNls 	::= nl strictNls | nl	# Without nls, used before the title
nls		::= nlc nls 	 | nl






syntaxHeader	::= "Syntax" nl equals nls

titleChar	::= Upper| Lower| digit | " "
titleLine	::= $ titleChar titleLine | titleChar
title		::= strictNls titleLine nls stars | titleLine nls stars



### All about syntax 

identifier	::= Identifier
broadIdentifier ::= WordChar broadIdentifier | WordChar
digit		::= Digit

wsMode		::= "::=" "$" | "::=" | "~~=" "$" | "~~=" | "//=" "$" | "//="


bnfTerm		::= identifier | bnfBuiltin | String
bnfBuiltin	::= "String" | "Any" | "Upper" | "Lower" | "Digit" | "LineChar" | "Identifier" | "WordChar"
bnfBar		//= nl tabs "|" | "|"
bnfExpression	::= bnfTerm bnfBar bnfExpression | bnfTerm bnfExpression | bnfTerm

bnf ::= identifier wsMode bnfExpression
bnfs ::= bnf nls bnfs | bnf nls

### All about syntax styling

styleHeader ::= "Syntax Style" nl equals nls

styleChoice ::= digit styleChoice | digit

styleLine ::= identifier "." styleChoice "->" string | identifier "->" string
styleLines ::= styleLine nls styleLines | styleLine


### All about functions

typeTerm ::= identifier | "(" type ")"
type	::= typeTerm "->" type | typeTerm 

signature::= identifier ":" type

expressionCS ::= expression "," expressionCS | expression

expressionTerm ::= broadIdentifier "(" expressionCS ")"
	| broadIdentifier "[" expression "]"	
	| broadIdentifier
	| String
	| "(" expression ")"

expression	::= expressionTerm expression
	| expressionTerm


function ::= signature nlc 


 
### Main file

language ::= title nls syntaxHeader bnfs styleHeader styleLines rest  

rest		::= Any rest | Any 


 Syntax Style
==============

rest -> "error"
title -> "h1"
syntaxHeader -> "h2"
styleHeader -> "h2"
equals -> "noise"
identifier -> "type"
wsMode -> "operator"
bnfExpression.0 -> "noise"
bnfTerm -> "statement"
bnfBuiltin -> "keyword"
comment -> "comment"
commentLine -> "comment"

styleLine -> "noise"
string -> "dirtier-hack"


Functions
=========

id	: language -> language
id(l)	= l
